import os
import asyncio
import threading
import psycopg2
import psycopg2.extras
import logging
from contextlib import contextmanager
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, ChatJoinRequestHandler, CallbackContext

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –í production dotenv –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º warning'–∏ Werkzeug –≤ production
logging.getLogger('werkzeug').setLevel(logging.ERROR)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_env_var(var_name, default=None, var_type=str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫"""
    value = os.environ.get(var_name)
    if not value or value.strip() == "":
        return var_type(default) if default is not None else None
    
    try:
        return var_type(value.strip())
    except (ValueError, TypeError) as e:
        logger.warning(f"Invalid value for {var_name}: {value}. Using default: {default}")
        return var_type(default) if default is not None else None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
class Config:
    BOT_TOKEN = get_env_var("BOT_TOKEN")
    # PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫ –∏ DATABASE_URL
    DATABASE_URL = get_env_var("DATABASE_URL")  # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π URL
    DB_HOST = get_env_var("DB_HOST")
    DB_PORT = get_env_var("DB_PORT", 5432, int)  # PostgreSQL –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DB_NAME = get_env_var("DB_NAME")
    DB_USER = get_env_var("DB_USER")
    DB_PASSWORD = get_env_var("DB_PASSWORD")
    DB_TABLE = get_env_var("DB_TABLE", "cms_users")
    WEBHOOK_URL = get_env_var("WEBHOOK_URL")
    GROUP_ID = get_env_var("GROUP_ID", 0, int)
    PORT = get_env_var("PORT", 10000, int)
    ADMIN_ID = get_env_var("ADMIN_ID", 0, int)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = ["BOT_TOKEN", "WEBHOOK_URL"]
if Config.DATABASE_URL:
    logger.info("Using DATABASE_URL for database connection")
else:
    required_vars.extend(["DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"])
    logger.info("Using individual database parameters")

missing_vars = [var for var in required_vars if not getattr(Config, var)]
if missing_vars:
    logger.error(f"Missing required environment variables: {', '.join(missing_vars)}")
    raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
verified_users = set()  # Whitelist –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é
def run_async_in_thread(async_func, timeout=30):
    def thread_worker():
        try:
            asyncio.run(async_func())  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã
            logger.info("Async processing completed successfully")
        except Exception as e:
            logger.error(f"Error in async thread: {e}")

    thread = threading.Thread(target=thread_worker)
    thread.start()
    thread.join(timeout=timeout)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    conn = None
    try:
        if Config.DATABASE_URL:
            logger.info(f"Connecting to PostgreSQL using DATABASE_URL")
            conn = psycopg2.connect(
                Config.DATABASE_URL,
                cursor_factory=psycopg2.extras.RealDictCursor,
                connect_timeout=10,
                sslmode='require'  # Render —Ç—Ä–µ–±—É–µ—Ç SSL
            )
        else:
            logger.info(f"Connecting to PostgreSQL: {Config.DB_HOST}:{Config.DB_PORT}/{Config.DB_NAME}")
            conn = psycopg2.connect(
                host=Config.DB_HOST,
                port=Config.DB_PORT,
                user=Config.DB_USER,
                password=Config.DB_PASSWORD,
                database=Config.DB_NAME,
                cursor_factory=psycopg2.extras.RealDictCursor,
                connect_timeout=10,
                sslmode='prefer'
            )
        
        conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç
        logger.info("‚úÖ PostgreSQL connection successful")
        yield conn
        
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection error: {e}")
        if Config.DATABASE_URL:
            logger.error("Connection via DATABASE_URL failed")
        else:
            logger.error(f"Connection details - Host: {Config.DB_HOST}, Port: {Config.DB_PORT}, DB: {Config.DB_NAME}, User: {Config.DB_USER}")
        raise
    finally:
        if conn:
            conn.close()
            logger.info("PostgreSQL connection closed")

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def normalize_fio(raw_fio):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –§–ò–û –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not raw_fio:
        return set()
    
    parts = [part.strip().lower() for part in raw_fio.strip().split() if part.strip()]
    # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 2 —á–∞—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ)
    return set(parts[:2])

def format_for_db(value, field_type="string"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î"""
    if field_type in ["year", "class"]:
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º integer –¥–ª—è PostgreSQL (–±–µ–∑ .00)
            return int(value)
        except ValueError:
            logger.warning(f"Invalid {field_type} format: {value}")
            return None
    return value

def parse_text(text):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    if not text:
        return None, None, None
    
    # –§–æ—Ä–º–∞—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏
    lines = text.split('\n')
    data = {}
    
    for line in lines:
        line = line.strip()
        if ':' in line:
            key, val = line.split(':', 1)
            key_lower = key.strip().lower()
            val_clean = val.strip()
            
            if key_lower in ['—Ñ–∏–æ', '—Ñ–∞–º–∏–ª–∏—è –∏–º—è', '–∏–º—è —Ñ–∞–º–∏–ª–∏—è', 'fio']:
                data['—Ñ–∏–æ'] = val_clean
            elif key_lower in ['–≥–æ–¥', '–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞', 'year']:
                data['–≥–æ–¥'] = val_clean
            elif key_lower in ['–∫–ª–∞—Å—Å', 'class', '–≥—Ä—É–ø–ø–∞']:
                data['–∫–ª–∞—Å—Å'] = val_clean
    
    if data.get('—Ñ–∏–æ') and data.get('–≥–æ–¥') and data.get('–∫–ª–∞—Å—Å'):
        return data.get('—Ñ–∏–æ'), data.get('–≥–æ–¥'), data.get('–∫–ª–∞—Å—Å')
    
    # –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ "–§–µ–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π 2010 2"
    parts = text.strip().split()
    if len(parts) >= 3:
        year_part = None
        class_part = None
        name_parts = []
        
        for part in parts:
            if part.isdigit():
                if len(part) == 4 and 1950 <= int(part) <= 2030:
                    year_part = part
                elif len(part) in [1, 2] and 1 <= int(part) <= 11:
                    class_part = part
                else:
                    name_parts.append(part)
            else:
                name_parts.append(part)
        
        if year_part and class_part and len(name_parts) >= 2:
            return ' '.join(name_parts), year_part, class_part
    
    return None, None, None

def check_user(fio, year, klass):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    logger.info(f"üîç Starting user verification - FIO: '{fio}', Year: '{year}', Class: '{klass}'")
    
    if not (fio and year and klass):
        logger.warning("‚ùå Invalid input data - missing required fields")
        return False
        
    fio_set = normalize_fio(fio)
    if not fio_set:
        logger.warning("‚ùå Invalid FIO format after normalization")
        return False
    
    formatted_year = format_for_db(year, "year")
    formatted_class = format_for_db(klass, "class")
    
    logger.info(f"üìù Normalized data - FIO parts: {fio_set}, Year: {formatted_year}, Class: {formatted_class}")
    logger.info(f"üìä Data types - Year: {type(formatted_year)}, Class: {type(formatted_class)}")
    
    if formatted_year is None or formatted_class is None:
        logger.warning("‚ùå Invalid year or class format for database")
        return False
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %s –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                query = f"SELECT fio FROM {Config.DB_TABLE} WHERE year = %s AND klass = %s"
                logger.info(f"üóÉÔ∏è Executing PostgreSQL query: {query}")
                logger.info(f"üìä Query parameters: year={formatted_year}, klass={formatted_class}")
                logger.info(f"üìã Using table: {Config.DB_TABLE}")
                
                cursor.execute(query, (formatted_year, formatted_class))
                rows = cursor.fetchall()
                
                logger.info(f"üìà Found {len(rows)} records in PostgreSQL for year {formatted_year}, class {formatted_class}")
                
                if rows:
                    logger.info("üë• Database records found:")
                    for i, row in enumerate(rows, 1):
                        logger.info(f"  {i}. {row['fio']}")
                
                for row in rows:
                    db_fio_set = normalize_fio(row['fio'])
                    logger.info(f"üîÑ Comparing: input={fio_set} vs db={db_fio_set}")
                    
                    if fio_set.issubset(db_fio_set) or db_fio_set.issubset(fio_set):
                        logger.info(f"‚úÖ MATCH FOUND! User verified: '{fio}' matches '{row['fio']}'")
                        return True
                        
    except Exception as e:
        logger.error(f"‚ùå Database query error: {e}")
        logger.error(f"Query details - Table: {Config.DB_TABLE}, Year: {formatted_year}, Class: {formatted_class}")
        return False
    
    logger.info(f"‚ùå NO MATCH: User '{fio}' not found in {Config.DB_TABLE} for year {formatted_year}, class {formatted_class}")
    return False

# Telegram —É—Ç–∏–ª–∏—Ç—ã
async def send_message(user_id, text, context_or_app, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º bot
        if hasattr(context_or_app, 'bot'):  # Context
            bot = context_or_app.bot
        elif hasattr(context_or_app, '_bot'):  # Application
            bot = context_or_app._bot
        else:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ bot
            bot = context_or_app
        
        await bot.send_message(
            chat_id=user_id, 
            text=text,
            reply_markup=reply_markup
        )
        logger.info(f"Sent message to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending message to {user_id}: {e}")

async def send_not_found_message(user_id, fio, year, klass, context_or_app):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π –∞–¥–º–∏–Ω–∞"""
    message = (
        f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω:\n"
        f"–§–ò–û: {fio}\n"
        f"–ì–æ–¥: {year}\n"
        f"–ö–ª–∞—Å—Å: {klass}\n\n"
        f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        f"‚Ä¢ –û–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –§–ò–û\n"
        f"‚Ä¢ –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–ª–∏ –∫–ª–∞—Å—Å\n"
        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ —à–∫–æ–ª—ã\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üÜò –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —è —Ç–æ—á–Ω–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫ –§–ú–õ 30",
            callback_data=f"admin_help_{user_id}"
        )]
    ])
    
    await send_message(user_id, message, context_or_app, keyboard)

def create_instruction_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –§–ú–õ 30.\n\n"
        "–≠—Ç–æ –∞–¥–º–∏–Ω —á–∞—Ç–∞ –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤, 1983-2.\n\n"
        "–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –≤—ã —É—á–∏–ª–∏—Å—å –≤ —à–∫–æ–ª–µ.\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚ñ´Ô∏è –ü—Ä–æ—Å—Ç–æ–π: –§–µ–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π 2010 2\n\n"
        "‚ñ´Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:\n"
        "–§–ò–û: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
        "–ì–æ–¥: 2015\n"
        "–ö–ª–∞—Å—Å: 3\n\n"
        "‚ñ´Ô∏è –ü–æ—à–∞–≥–æ–≤–æ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! ‚úÖ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        user_id = update.chat_join_request.from_user.id
        chat_id = update.chat_join_request.chat.id
        bio = getattr(update.chat_join_request, 'bio', None)
        
        logger.info(f"Processing join request from user {user_id} in chat {chat_id}")
        logger.info(f"Bio present: {bio is not None}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if user_id in verified_users:
            logger.info(f"User {user_id} is verified, approving")
            try:
                await context.bot.approve_chat_join_request(chat_id, user_id)
                verified_users.discard(user_id)
                logger.info(f"Approved request from verified user {user_id}")
            except Exception as e:
                logger.error(f"Error approving request: {e}")
            return
        
        # –ï—Å–ª–∏ bio –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not bio:
            logger.info(f"Declining request from {user_id}: no bio")
            logger.info(f"Request should be declined for user {user_id}. User should write to bot directly.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            user_info = update.chat_join_request.from_user
            username = f"@{user_info.username}" if user_info.username else user_info.first_name
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot_info = await context.bot.get_me()
                group_message = f"üëã {username}, –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –§–ú–õ 30, –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É @{bot_info.username} –∏ –Ω–∞–∂–º–∏ /start. –ë–æ—Ç —Å–≤–µ—Ä–∏—Ç—Å—è —Å –ë–î."
                await context.bot.send_message(chat_id=chat_id, text=group_message)
                logger.info(f"‚úÖ Sent instruction message to group for {username}")
            except Exception as e:
                logger.error(f"‚ùå Could not send group message for {username}: {e}")
                logger.info(f"‚è≥ Pending request from {username} (user_id: {user_id})")
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ bio
        fio, year, klass = parse_text(bio)
        
        if not (fio and year and klass):
            logger.info(f"Declining request from {user_id}: incomplete data")
            await context.bot.decline_chat_join_request(chat_id, user_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
        if check_user(fio, year, klass):
            logger.info(f"Approving request from {user_id}")
            try:
                await context.bot.approve_chat_join_request(chat_id, user_id)
                logger.info(f"Approved request from {user_id} - user found in database")
            except Exception as e:
                logger.error(f"Error approving request: {e}")
        else:
            logger.info(f"Declining request from {user_id}: user not found")
            logger.info(f"Request should be declined for {user_id} - user not found in database")
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º decline_chat_join_request –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å event loop
            # –ü—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É
            
    except Exception as e:
        logger.error(f"Error handling join request: {e}")

async def handle_private_message(user_id, text, telegram_app):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if text.strip().lower() == '/start':
        await start_step_input(user_id, telegram_app)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not parse_text(text)[0]:  # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        welcome_message = create_instruction_message()
        await send_message(user_id, welcome_message, telegram_app)
        return
    
    # –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
    if user_id in user_states:
        await handle_step_input(user_id, text, telegram_app)
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    fio, year, klass = parse_text(text)
    
    if fio and year and klass:
        if check_user(fio, year, klass):
            verified_users.add(user_id)
            response = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n"
                f"–§–ò–û: {fio}\n"
                f"–ì–æ–¥: {year}\n"
                f"–ö–ª–∞—Å—Å: {klass}\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: https://t.me/test_bots_nf"
            )
            await send_message(user_id, response, telegram_app)
        else:
            await send_not_found_message(user_id, fio, year, klass, telegram_app)
    else:
        response = (
            "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "1Ô∏è‚É£ –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –§–µ–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π 2010 2\n\n"
            "2Ô∏è‚É£ –° –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏:\n"
            "–§–ò–û: –í–∞—à–µ –ò–º—è –§–∞–º–∏–ª–∏—è\n"
            "–ì–æ–¥: 2015\n"
            "–ö–ª–∞—Å—Å: 3\n\n"
            "3Ô∏è‚É£ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"
        )
        await send_message(user_id, response, telegram_app)

async def handle_step_input(user_id, text, telegram_app):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        state = user_states[user_id]
        step = state['step']
        
        if text.strip().lower() == '/cancel':
            del user_states[user_id]
            await send_message(user_id, "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", telegram_app)
            return
        
        if step == 'waiting_name':
            name_parts = text.strip().split()
            if len(name_parts) >= 2:
                state['data']['fio'] = text.strip()
                state['step'] = 'waiting_year'
                response = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2015):"
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤):"
                
        elif step == 'waiting_year':
            if text.strip().isdigit() and 1950 <= int(text.strip()) <= 2030:
                state['data']['year'] = text.strip()
                state['step'] = 'waiting_class'
                response = "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-11):"
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2015):"
                
        elif step == 'waiting_class':
            if text.strip().isdigit() and 1 <= int(text.strip()) <= 11:
                state['data']['class'] = text.strip()
                
                fio = state['data']['fio']
                year = state['data']['year']
                klass = state['data']['class']
                
                del user_states[user_id]
                
                if check_user(fio, year, klass):
                    verified_users.add(user_id)
                    response = (
                        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n"
                        f"–§–ò–û: {fio}\n"
                        f"–ì–æ–¥: {year}\n"
                        f"–ö–ª–∞—Å—Å: {klass}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: https://t.me/test_bots_nf"
                    )
                    await send_message(user_id, response, telegram_app)
                else:
                    await send_not_found_message(user_id, fio, year, klass, telegram_app)
                return
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-11):"
        
        await send_message(user_id, response, telegram_app)
        
    except Exception as e:
        logger.error(f"Error in step input: {e}")
        if user_id in user_states:
            del user_states[user_id]

async def start_step_input(user_id, telegram_app):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
    user_states[user_id] = {'step': 'waiting_name', 'data': {}}
    response = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤–æ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤):\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    await send_message(user_id, response, telegram_app)

async def handle_callback_query(update, telegram_app):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        if query.data.startswith("admin_help_"):
            await query.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            
            user_info = query.from_user
            username = f"@{user_info.username}" if user_info.username else "–±–µ–∑ username"
            
            user_message = (
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
            )
            await send_message(user_id, user_message, telegram_app)
            
            if Config.ADMIN_ID:
                admin_message = (
                    f"üÜò –ó–ê–ü–†–û–° –ù–ê –ü–û–ú–û–©–¨ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.first_name} {user_info.last_name or ''}\n"
                    f"üìß Username: {username}\n"
                    f"üÜî ID: {user_id}\n"
                    f"üì± –Ø–∑—ã–∫: {user_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–º –§–ú–õ 30, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    f"üîó –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç: tg://user?id={user_id}"
                )
                await send_message(Config.ADMIN_ID, admin_message, telegram_app)
                
    except Exception as e:
        logger.error(f"Error handling callback query: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
try:
    telegram_app = ApplicationBuilder().token(Config.BOT_TOKEN).build()
    telegram_app.add_handler(ChatJoinRequestHandler(handle_join_request))
    logger.info("Telegram application initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Telegram application: {e}")
    raise

# Flask routes
@app.route("/", methods=["POST"])
def webhook():
    """Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        json_data = request.get_json(force=True)
        logger.info(f"Received webhook data: {json_data}")
        
        update = Update.de_json(json_data, telegram_app.bot)
        
        if update.chat_join_request:
            logger.info("Processing chat_join_request")
            async def process_join():
                context = CallbackContext(application=telegram_app)
                await handle_join_request(update, context)
            run_async_in_thread(process_join)
            
        elif update.callback_query:
            logger.info("Processing callback_query")
            async def process_callback():
                await handle_callback_query(update, telegram_app)
            run_async_in_thread(process_callback, timeout=10)
            
        elif update.message and update.message.chat.type.name == 'PRIVATE':
            logger.info("Processing private message")
            user_id = update.message.from_user.id
            text = update.message.text or ""
            
            async def process_message():
                await handle_private_message(user_id, text, telegram_app)
            run_async_in_thread(process_message)
            
        return "ok"
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "error", 500

# Database connection testing
def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    logger.info("üß™ Testing PostgreSQL connection with different parameters...")
    
    connection_params = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if Config.DATABASE_URL:
        connection_params.append({
            "name": "DATABASE_URL connection",
            "params": {
                "dsn": Config.DATABASE_URL,
                "cursor_factory": psycopg2.extras.RealDictCursor,
                "connect_timeout": 10,
                "sslmode": 'require'
            }
        })
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ö
    if Config.DB_HOST:
        connection_params.extend([
            {
                "name": "Individual parameters with SSL required",
                "params": {
                    "host": Config.DB_HOST,
                    "port": Config.DB_PORT,
                    "user": Config.DB_USER,
                    "password": Config.DB_PASSWORD,
                    "database": Config.DB_NAME,
                    "cursor_factory": psycopg2.extras.RealDictCursor,
                    "connect_timeout": 10,
                    "sslmode": 'require'
                }
            },
            {
                "name": "Individual parameters with SSL preferred",
                "params": {
                    "host": Config.DB_HOST,
                    "port": Config.DB_PORT,
                    "user": Config.DB_USER,
                    "password": Config.DB_PASSWORD,
                    "database": Config.DB_NAME,
                    "cursor_factory": psycopg2.extras.RealDictCursor,
                    "connect_timeout": 10,
                    "sslmode": 'prefer'
                }
            }
        ])
    
    for test in connection_params:
        try:
            logger.info(f"üîå Testing: {test['name']}")
            if 'dsn' in test['params']:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DATABASE_URL
                dsn = test['params'].pop('dsn')
                conn = psycopg2.connect(dsn, **test['params'])
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                conn = psycopg2.connect(**test['params'])
            
            conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç
            logger.info(f"‚úÖ {test['name']} - SUCCESS!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã
            with conn.cursor() as cursor:
                cursor.execute("SELECT version()")
                version_row = cursor.fetchone()
                version = version_row['version'] if version_row else "Unknown"
                logger.info(f"üìä PostgreSQL version: {version}")
                
                cursor.execute("SELECT schema_name FROM information_schema.schemata")
                schemas = cursor.fetchall()
                schema_names = [schema['schema_name'] for schema in schemas]
                logger.info(f"üìã Available schemas: {schema_names}")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå {test['name']} - FAILED: {e}")
    
    return False

# Database verification
def verify_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    logger.info("üîç Verifying database connection and table structure...")
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                """)
                tables = cursor.fetchall()
                table_names = [table['table_name'] for table in tables]
                
                logger.info(f"üìã Available tables: {table_names}")
                
                if Config.DB_TABLE not in table_names:
                    logger.error(f"‚ùå Table '{Config.DB_TABLE}' not found in database!")
                    return False
                
                logger.info(f"‚úÖ Table '{Config.DB_TABLE}' exists")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã (PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
                cursor.execute(f"""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = %s AND table_schema = 'public'
                    ORDER BY ordinal_position
                """, (Config.DB_TABLE,))
                columns = cursor.fetchall()
                
                logger.info(f"üìä Table '{Config.DB_TABLE}' structure:")
                for col in columns:
                    logger.info(f"  - {col['column_name']}: {col['data_type']} (Nullable: {col['is_nullable']}, Default: {col['column_default']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                required_fields = ['fio', 'year', 'klass']
                column_names = [col['column_name'] for col in columns]
                
                missing_fields = [field for field in required_fields if field not in column_names]
                if missing_fields:
                    logger.error(f"‚ùå Missing required fields: {missing_fields}")
                    return False
                
                logger.info("‚úÖ All required fields present")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT COUNT(*) as count FROM {Config.DB_TABLE}")
                count_result = cursor.fetchone()
                total_records = count_result['count']
                
                logger.info(f"üìà Total records in table: {total_records}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT fio, year, klass FROM {Config.DB_TABLE} LIMIT 5")
                sample_rows = cursor.fetchall()
                
                if sample_rows:
                    logger.info("üìù Sample records:")
                    for i, row in enumerate(sample_rows, 1):
                        logger.info(f"  {i}. FIO: {row['fio']}, Year: {row['year']}, Class: {row['klass']}")
                else:
                    logger.warning("‚ö†Ô∏è No records found in table")
                
                logger.info("‚úÖ Database verification completed successfully")
                return True
                
    except Exception as e:
        logger.error(f"‚ùå Database verification failed: {e}")
        return False

# Setup
async def setup_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        logger.info("üîß PostgreSQL configuration:")
        if Config.DATABASE_URL:
            logger.info(f"  DATABASE_URL: {Config.DATABASE_URL[:50]}...{Config.DATABASE_URL[-20:] if len(Config.DATABASE_URL) > 70 else Config.DATABASE_URL}")
        logger.info(f"  Host: {Config.DB_HOST}")
        logger.info(f"  Port: {Config.DB_PORT}")
        logger.info(f"  Database: {Config.DB_NAME}")
        logger.info(f"  User: {Config.DB_USER}")
        logger.info(f"  Table: {Config.DB_TABLE}")
        logger.info(f"  Password length: {len(Config.DB_PASSWORD) if Config.DB_PASSWORD else 0} chars")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîß Testing database connectivity...")
        if not test_database_connection():
            logger.error("‚ùå All database connection tests failed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not verify_database():
            logger.error("‚ùå Database verification failed - bot may not work correctly")
        
        await telegram_app.bot.set_webhook(f"{Config.WEBHOOK_URL}/")
        logger.info(f"Webhook set to {Config.WEBHOOK_URL}/")
        logger.info(f"Bot configured for GROUP_ID: {Config.GROUP_ID}")
        
        if Config.GROUP_ID:
            try:
                chat_info = await telegram_app.bot.get_chat(chat_id=Config.GROUP_ID)
                logger.info(f"Group: {chat_info.title} ({chat_info.type})")
            except Exception as e:
                logger.warning(f"Could not get group info: {e}")
                
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")

def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è production"""
    try:
        asyncio.run(setup_webhook())
        logger.info("Application initialized for production")
    except Exception as e:
        logger.error(f"Failed to initialize application: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(setup_webhook())
    logger.info("Starting Flask application")
    app.run(host="0.0.0.0", port=Config.PORT, debug=False)
else:
    init_app()
