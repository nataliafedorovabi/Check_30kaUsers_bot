import os
import asyncio
import psycopg2
import psycopg2.extras
import logging
from contextlib import contextmanager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, ChatJoinRequestHandler, CallbackContext, MessageHandler, CommandHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –í production dotenv –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º warning'–∏ Werkzeug –≤ production
logging.getLogger('werkzeug').setLevel(logging.ERROR)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_env_var(var_name, default=None, var_type=str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫"""
    value = os.environ.get(var_name)
    if not value or value.strip() == "":
        return var_type(default) if default is not None else None
    
    try:
        return var_type(value.strip())
    except (ValueError, TypeError) as e:
        logger.warning(f"Invalid value for {var_name}: {value}. Using default: {default}")
        return var_type(default) if default is not None else None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
class Config:
    BOT_TOKEN = get_env_var("BOT_TOKEN")
    # PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫ –∏ DATABASE_URL
    DATABASE_URL = get_env_var("DATABASE_URL")  # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π URL
    DB_HOST = get_env_var("DB_HOST")
    DB_PORT = get_env_var("DB_PORT", 5432, int)  # PostgreSQL –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DB_NAME = get_env_var("DB_NAME")
    DB_USER = get_env_var("DB_USER")
    DB_PASSWORD = get_env_var("DB_PASSWORD")
    DB_TABLE = get_env_var("DB_TABLE", "cms_users")
    WEBHOOK_URL = get_env_var("WEBHOOK_URL")
    GROUP_ID = get_env_var("GROUP_ID", 0, int)
    PORT = get_env_var("PORT", 10000, int)
    ADMIN_ID = get_env_var("ADMIN_ID", 0, int)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = ["BOT_TOKEN", "WEBHOOK_URL"]
if Config.DATABASE_URL:
    logger.info("Using DATABASE_URL for database connection")
else:
    required_vars.extend(["DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"])
    logger.info("Using individual database parameters")

missing_vars = [var for var in required_vars if not getattr(Config, var)]
if missing_vars:
    logger.error(f"Missing required environment variables: {', '.join(missing_vars)}")
    raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    conn = None
    try:
        if Config.DATABASE_URL:
            logger.info(f"Connecting to PostgreSQL using DATABASE_URL")
            conn = psycopg2.connect(
                Config.DATABASE_URL,
                cursor_factory=psycopg2.extras.RealDictCursor,
                connect_timeout=10,
                sslmode='require'  # Render —Ç—Ä–µ–±—É–µ—Ç SSL
            )
        else:
            logger.info(f"Connecting to PostgreSQL: {Config.DB_HOST}:{Config.DB_PORT}/{Config.DB_NAME}")
            conn = psycopg2.connect(
                host=Config.DB_HOST,
                port=Config.DB_PORT,
                user=Config.DB_USER,
                password=Config.DB_PASSWORD,
                database=Config.DB_NAME,
                cursor_factory=psycopg2.extras.RealDictCursor,
                connect_timeout=10,
                sslmode='prefer'
            )
        
        conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç
        logger.info("‚úÖ PostgreSQL connection successful")
        yield conn
        
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection error: {e}")
        if Config.DATABASE_URL:
            logger.error("Connection via DATABASE_URL failed")
        else:
            logger.error(f"Connection details - Host: {Config.DB_HOST}, Port: {Config.DB_PORT}, DB: {Config.DB_NAME}, User: {Config.DB_USER}")
        raise
    finally:
        if conn:
            conn.close()
            logger.info("PostgreSQL connection closed")

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def normalize_fio(raw_fio):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –§–ò–û –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not raw_fio:
        return set()
    
    parts = [part.strip().lower() for part in raw_fio.strip().split() if part.strip()]
    # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 2 —á–∞—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ)
    return set(parts[:2])

def format_for_db(value, field_type="string"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î"""
    if field_type in ["year", "class"]:
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º integer –¥–ª—è PostgreSQL (–±–µ–∑ .00)
            return int(value)
        except ValueError:
            logger.warning(f"Invalid {field_type} format: {value}")
            return None
    return value

def parse_text(text):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    if not text:
        return None, None, None
    
    # –§–æ—Ä–º–∞—Ç —Å –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏
    lines = text.split('\n')
    data = {}
    
    for line in lines:
        line = line.strip()
        if ':' in line:
            key, val = line.split(':', 1)
            key_lower = key.strip().lower()
            val_clean = val.strip()
            
            if key_lower in ['—Ñ–∏–æ', '—Ñ–∞–º–∏–ª–∏—è –∏–º—è', '–∏–º—è —Ñ–∞–º–∏–ª–∏—è', 'fio']:
                data['—Ñ–∏–æ'] = val_clean
            elif key_lower in ['–≥–æ–¥', '–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞', 'year']:
                data['–≥–æ–¥'] = val_clean
            elif key_lower in ['–∫–ª–∞—Å—Å', 'class', '–≥—Ä—É–ø–ø–∞']:
                data['–∫–ª–∞—Å—Å'] = val_clean
    
    if data.get('—Ñ–∏–æ') and data.get('–≥–æ–¥') and data.get('–∫–ª–∞—Å—Å'):
        return data.get('—Ñ–∏–æ'), data.get('–≥–æ–¥'), data.get('–∫–ª–∞—Å—Å')
    
    # –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ "–§–µ–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π 2010 2"
    parts = text.strip().split()
    if len(parts) >= 3:
        year_part = None
        class_part = None
        name_parts = []
        
        for part in parts:
            if part.isdigit():
                if len(part) == 4 and 1950 <= int(part) <= 2030:
                    year_part = part
                elif len(part) in [1, 2] and 1 <= int(part) <= 11:
                    class_part = part
                else:
                    name_parts.append(part)
            else:
                name_parts.append(part)
        
        if year_part and class_part and len(name_parts) >= 2:
            return ' '.join(name_parts), year_part, class_part
    
    return None, None, None

def check_user(fio, year, klass):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    logger.info(f"üîç Starting user verification - FIO: '{fio}', Year: '{year}', Class: '{klass}'")
    
    if not (fio and year and klass):
        logger.warning("‚ùå Invalid input data - missing required fields")
        return False
        
    fio_set = normalize_fio(fio)
    if not fio_set:
        logger.warning("‚ùå Invalid FIO format after normalization")
        return False
    
    formatted_year = format_for_db(year, "year")
    formatted_class = format_for_db(klass, "class")
    
    logger.info(f"üìù Normalized data - FIO parts: {fio_set}, Year: {formatted_year}, Class: {formatted_class}")
    logger.info(f"üìä Data types - Year: {type(formatted_year)}, Class: {type(formatted_class)}")
    
    if formatted_year is None or formatted_class is None:
        logger.warning("‚ùå Invalid year or class format for database")
        return False
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %s –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                query = f"SELECT fio FROM {Config.DB_TABLE} WHERE year = %s AND klass = %s"
                logger.info(f"üóÉÔ∏è Executing PostgreSQL query: {query}")
                logger.info(f"üìä Query parameters: year={formatted_year}, klass={formatted_class}")
                logger.info(f"üìã Using table: {Config.DB_TABLE}")
                
                cursor.execute(query, (formatted_year, formatted_class))
                rows = cursor.fetchall()
                
                logger.info(f"üìà Found {len(rows)} records in PostgreSQL for year {formatted_year}, class {formatted_class}")
                
                if rows:
                    logger.info("üë• Database records found:")
                    for i, row in enumerate(rows, 1):
                        logger.info(f"  {i}. {row['fio']}")
                
                for row in rows:
                    db_fio_set = normalize_fio(row['fio'])
                    logger.info(f"üîÑ Comparing: input={fio_set} vs db={db_fio_set}")
                    
                    if fio_set.issubset(db_fio_set) or db_fio_set.issubset(fio_set):
                        logger.info(f"‚úÖ MATCH FOUND! User verified: '{fio}' matches '{row['fio']}'")
                        return True
                        
    except Exception as e:
        logger.error(f"‚ùå Database query error: {e}")
        logger.error(f"Query details - Table: {Config.DB_TABLE}, Year: {formatted_year}, Class: {formatted_class}")
        return False
    
    logger.info(f"‚ùå NO MATCH: User '{fio}' not found in {Config.DB_TABLE} for year {formatted_year}, class {formatted_class}")
    return False

# Telegram —É—Ç–∏–ª–∏—Ç—ã
async def send_message(user_id, text, context_or_app, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º bot
        bot = None
        if hasattr(context_or_app, 'bot'):
            bot = context_or_app.bot
        elif hasattr(context_or_app, '_bot'):
            bot = context_or_app._bot
        elif hasattr(context_or_app, 'send_message'):
            bot = context_or_app
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await bot.send_message(
            chat_id=user_id, 
            text=text,
            reply_markup=reply_markup
        )
        logger.info(f"Sent message to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending message to {user_id}: {e}")

# === –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
NOT_FOUND_MESSAGE = (
    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ—Ç —á–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ª–∏—Ü–µ—è.\n"
    "–ê–¥–º–∏–Ω —á–∞—Ç–∞ –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤ @{admin_id} —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≤—Å–µ, —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª–∞. –ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –° —É–≤–∞–∂–µ–Ω–∏–µ–º.\n"
    "–ï—Å–ª–∏ —Ç—ã —Ç–æ—á–Ω–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫ –§–ú–õ 30, –Ω–∞–ø–∏—à–∏ –°–µ—Ä–≥–µ—é –≤ –ª–∏—á–∫—É @{admin_id} ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!\n"
    "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start"
)
INSTRUCTION_MESSAGE = (
    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏ –º–Ω–µ –§–ò –≥–æ–¥ –∫–ª–∞—Å—Å, –∏–ª–∏ /start.\n\n"
)

async def get_admin_mention(bot):
    try:
        admin_id = Config.ADMIN_ID
        if not admin_id:
            return "[–∞–¥–º–∏–Ω](https://t.me/)"  # fallback
        admin_user = await bot.get_chat(admin_id)
        if getattr(admin_user, 'username', None):
            return f"[@{admin_user.username}](https://t.me/{admin_user.username})"
        else:
            # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
            name = admin_user.first_name or "–∞–¥–º–∏–Ω"
            return f"[{name}](tg://user?id={admin_id})"
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞: {e}")
        return "[–∞–¥–º–∏–Ω](https://t.me/)"

async def send_not_found_message(user_id, fio, year, klass, context_or_app):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–±–µ–∑ –∫–Ω–æ–ø–∫–∏, —Å –Ω–∏–∫–æ–º –∞–¥–º–∏–Ω–∞)"""
    admin_mention = await get_admin_mention(context_or_app.bot if hasattr(context_or_app, 'bot') else context_or_app)
    message = (
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ—Ç —á–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –ª–∏—Ü–µ—è.\n"
        f"–ê–¥–º–∏–Ω —á–∞—Ç–∞ –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤ {admin_mention} —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≤—Å–µ, —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ—Ç, –Ω–æ —É –Ω–∞—Å –ø—Ä–∞–≤–∏–ª–∞. –ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –° —É–≤–∞–∂–µ–Ω–∏–µ–º.\n"
        f"–ï—Å–ª–∏ —Ç—ã —Ç–æ—á–Ω–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫ –§–ú–õ 30, –Ω–∞–ø–∏—à–∏ –°–µ—Ä–≥–µ—é –≤ –ª–∏—á–∫—É {admin_mention} ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!\n"
        "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start"
    )
    await send_message(user_id, message, context_or_app)

def create_instruction_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    return INSTRUCTION_MESSAGE

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
verified_users = set()  # Whitelist –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

SUCCESS_MESSAGE_ADMIN = (
    "‚úÖ –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –¢—ã –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n"
    "–§–ò–û: {fio}\n"
    "–ì–æ–¥: {year}\n"
    "–ö–ª–∞—Å—Å: {klass}\n"
    "{teacher_block}"
    "–¢–µ–ø–µ—Ä—å –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å—Å—ã–ª–∫–∞: https://t.me/test_bots_nf\n\n"
    "–ê–¥–º–∏–Ω —á–∞—Ç–∞ –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤, 1983-2, @{admin_id}. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ö–ª—É–±—É, –§–æ–Ω–¥—É30, —Å–∞–π—Ç—É 30ka.ru, —á–∞—Ç—É, —à–∫–æ–ª–µ - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –º–Ω–µ –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å!"
)
INCOMPLETE_DATA_MESSAGE = (
    "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
    "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
    "1Ô∏è‚É£ –û–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –§–µ–¥–æ—Ä–æ–≤ –°–µ—Ä–≥–µ–π 2010 2\n\n"
    "2Ô∏è‚É£ –° –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏:\n"
    "–§–ò–û: –í–∞—à–µ –ò–º—è –§–∞–º–∏–ª–∏—è\n"
    "–ì–æ–¥: 2015\n"
    "–ö–ª–∞—Å—Å: 3\n\n"
    "3Ô∏è‚É£ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"
)

def make_success_message(fio, year, klass, teacher=None, admin_mention=None):
    teacher_block = f"–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher}\n\n" if teacher and teacher != '-' else ""
    if admin_mention is None:
        admin_mention = "[–∞–¥–º–∏–Ω](https://t.me/)"
    return (
        "‚úÖ –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –¢—ã –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤:\n"
        f"–§–ò–û: {fio}\n"
        f"–ì–æ–¥: {year}\n"
        f"–ö–ª–∞—Å—Å: {klass}\n"
        f"{teacher_block}"
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç - –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å—Å—ã–ª–∫–∞: https://t.me/test_bots_nf\n\n"
        f"–ê–¥–º–∏–Ω —á–∞—Ç–∞ –°–µ—Ä–≥–µ–π –§–µ–¥–æ—Ä–æ–≤, 1983-2, {admin_mention}. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ö–ª—É–±—É, –§–æ–Ω–¥—É30, —Å–∞–π—Ç—É 30ka.ru, —á–∞—Ç—É, —à–∫–æ–ª–µ - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –º–Ω–µ –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å!"
    )

async def handle_private_message_entrypoint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""
    await handle_private_message(user_id, text, context)

async def handle_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await handle_private_message(user_id, "/start", context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        user_id = update.chat_join_request.from_user.id
        chat_id = update.chat_join_request.chat.id
        bio = getattr(update.chat_join_request, 'bio', None)
        logger.info(f"Processing join request from user {user_id} in chat {chat_id}")
        logger.info(f"Bio present: {bio is not None}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if user_id in verified_users:
            logger.info(f"User {user_id} is verified, approving")
            try:
                await context.bot.approve_chat_join_request(chat_id, user_id)
                verified_users.discard(user_id)
                logger.info(f"Approved request from verified user {user_id}")
            except Exception as e:
                logger.error(f"Error approving request: {e}")
                try:
                    await send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_id}.", context)
                except Exception as e2:
                    logger.error(f"Error sending error message to user: {e2}")
            return
        # –ï—Å–ª–∏ bio –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not bio:
            logger.info(f"Declining request from {user_id}: no bio")
            logger.info(f"Request should be declined for user {user_id}. User should write to bot directly.")
            user_info = update.chat_join_request.from_user
            username = f"@{user_info.username}" if user_info.username else user_info.first_name
            try:
                bot_info = await context.bot.get_me()
                group_message = f"–ü—Ä–∏–≤–µ—Ç {username}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å! –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –§–ú–õ 30, –ø–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É @{bot_info.username} –∏ –Ω–∞–∂–º–∏ start. –ë–æ—Ç —Å–≤–µ—Ä–∏—Ç—Å—è —Å –ë–î –ª–∏—Ü–µ—è."
                await context.bot.send_message(chat_id=chat_id, text=group_message)
                logger.info(f"‚úÖ Sent instruction message to group for {username}")
            except Exception as e:
                logger.error(f"‚ùå Could not send group message for {username}: {e}")
                logger.info(f"‚è≥ Pending request from {username} (user_id: {user_id})")
            # –£–¥–∞–ª—è–µ–º/–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫—É:
            # try:
            #     await send_message(user_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –±–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", context)
            # except Exception as e2:
            #     logger.error(f"Error sending decline message to user: {e2}")
            return
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ bio
        fio, year, klass = parse_text(bio)
        if not (fio and year and klass):
            logger.info(f"Declining request from {user_id}: incomplete data")
            try:
                await context.bot.decline_chat_join_request(chat_id, user_id)
            except Exception as e:
                logger.error(f"Error declining join request: {e}")
            try:
                await send_message(user_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", context)
            except Exception as e2:
                logger.error(f"Error sending decline message to user: {e2}")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
        if check_user(fio, year, klass):
            logger.info(f"Approving request from {user_id}")
            try:
                await context.bot.approve_chat_join_request(chat_id, user_id)
                logger.info(f"Approved request from {user_id} - user found in database")
            except Exception as e:
                logger.error(f"Error approving request: {e}")
                try:
                    await send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_id}.", context)
                except Exception as e2:
                    logger.error(f"Error sending error message to user: {e2}")
        else:
            logger.info(f"Declining request from {user_id}: user not found")
            logger.info(f"Request should be declined for {user_id} - user not found in database")
            try:
                await send_not_found_message(user_id, fio, year, klass, context)
            except Exception as e2:
                logger.error(f"Error sending not found message to user: {e2}")
    except Exception as e:
        logger.error(f"Error handling join request: {e}")
        try:
            user_id = update.chat_join_request.from_user.id
            await send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_id}.", context)
        except Exception as e2:
            logger.error(f"Error sending error message to user: {e2}")

async def handle_private_message(user_id, text, telegram_app):
    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if int(user_id) == int(Config.ADMIN_ID) and text.strip().lower() == '/start':
        await send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ–≤–µ—Ä—è—é –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ 30–∫–∏. –°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.", telegram_app)
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ handle_step_input!
    if user_id in user_states:
        await handle_step_input(user_id, text, telegram_app)
        return
    # –ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if text.strip().lower() == '/start':
        await start_step_input(user_id, telegram_app)
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not parse_text(text)[0]:  # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        welcome_message = create_instruction_message()
        await send_message(user_id, welcome_message, telegram_app)
        return
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    fio, year, klass = parse_text(text)
    if fio and year and klass:
        if check_user(fio, year, klass):
            verified_users.add(user_id)
            admin_mention = await get_admin_mention(telegram_app.bot)
            response = make_success_message(fio, year, klass, admin_mention=admin_mention)
            await send_message(user_id, response, telegram_app)
        else:
            await send_not_found_message(user_id, fio, year, klass, telegram_app)
    else:
        await send_message(user_id, INCOMPLETE_DATA_MESSAGE, telegram_app)

async def handle_step_input(user_id, text, telegram_app):
    try:
        state = user_states[user_id]
        step = state['step']
        if text.strip().lower() == '/cancel':
            del user_states[user_id]
            await send_message(user_id, "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", telegram_app)
            return
        if step == 'waiting_name':
            name_parts = text.strip().split()
            if len(name_parts) >= 2:
                state['data']['fio'] = text.strip()
                state['step'] = 'waiting_year'
                response = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∫–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2015):"
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤):"
        elif step == 'waiting_year':
            if text.strip().isdigit() and 1950 <= int(text.strip()) <= 2030:
                state['data']['year'] = text.strip()
                state['step'] = 'waiting_class'
                response = "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-11):"
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2015):"
        elif step == 'waiting_class':
            if text.strip().isdigit() and 1 <= int(text.strip()) <= 11:
                state['data']['class'] = text.strip()
                state['step'] = 'waiting_teacher'
                response = "–ï—Å–ª–∏ –ø–æ–º–Ω–∏—à—å, –Ω–∞–ø–∏—à–∏ –§–ò –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '-' –µ—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å):"
            else:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-11):"
        elif step == 'waiting_teacher':
            state['data']['teacher'] = text.strip()
            fio = state['data']['fio']
            year = state['data']['year']
            klass = state['data']['class']
            teacher = state['data']['teacher']
            del user_states[user_id]
            if check_user(fio, year, klass):
                verified_users.add(user_id)
                admin_mention = await get_admin_mention(telegram_app.bot)
                response = make_success_message(fio, year, klass, teacher, admin_mention)
                await send_message(user_id, response, telegram_app)
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
                try:
                    chat_id = Config.GROUP_ID
                    chat_info = await telegram_app.bot.get_chat(chat_id)
                    group_title = chat_info.title if hasattr(chat_info, 'title') else str(chat_id)
                    admin_msg = (
                        f"–í —á–∞—Ç '{group_title}' –ø—Ä–∏–Ω—è—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                        f"–§–ò: {fio}\n"
                        f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n"
                        f"–ö–ª–∞—Å—Å: {klass}\n"
                        f"–ö–ª.—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher}"
                    )
                    if Config.ADMIN_ID:
                        await send_message(Config.ADMIN_ID, admin_msg, telegram_app)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            else:
                await send_not_found_message(user_id, fio, year, klass, telegram_app)
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
                try:
                    chat_id = Config.GROUP_ID
                    chat_info = await telegram_app.bot.get_chat(chat_id)
                    group_title = chat_info.title if hasattr(chat_info, 'title') else str(chat_id)
                    admin_msg = (
                        f"–í —á–∞—Ç '{group_title}' –ø–æ—Å—Ç—É—á–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n"
                        f"–§–ò: {fio}\n"
                        f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n"
                        f"–ö–ª–∞—Å—Å: {klass}\n"
                        f"–ö–ª.—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher}"
                    )
                    if Config.ADMIN_ID:
                        await send_message(Config.ADMIN_ID, admin_msg, telegram_app)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return
        await send_message(user_id, response, telegram_app)
    except Exception as e:
        logger.error(f"Error in step input: {e}")
        if user_id in user_states:
            del user_states[user_id]

async def start_step_input(user_id, telegram_app):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
    user_states[user_id] = {'step': 'waiting_name', 'data': {}}
    response = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É –≤ —á–∞—Ç–µ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ 30–∫–∏.\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ —Ç—ã —É—á–∏–ª—Å—è –≤ –ª–∏—Ü–µ–µ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:"
    )
    await send_message(user_id, response, telegram_app)

async def handle_callback_query(update, telegram_app):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        if query.data.startswith("admin_help_"):
            await query.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            
            user_info = query.from_user
            username = f"@{user_info.username}" if user_info.username else "–±–µ–∑ username"
            
            user_message = (
                "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
            )
            await send_message(user_id, user_message, telegram_app)
            
            if Config.ADMIN_ID:
                admin_message = (
                    f"üÜò –ó–ê–ü–†–û–° –ù–ê –ü–û–ú–û–©–¨ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.first_name} {user_info.last_name or ''}\n"
                    f"üìß Username: {username}\n"
                    f"üÜî ID: {user_id}\n"
                    f"üì± –Ø–∑—ã–∫: {user_info.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–º –§–ú–õ 30, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    f"üîó –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç: tg://user?id={user_id}"
                )
                await send_message(Config.ADMIN_ID, admin_message, telegram_app)
                
    except Exception as e:
        logger.error(f"Error handling callback query: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
try:
    telegram_app = ApplicationBuilder().token(Config.BOT_TOKEN).build()
    telegram_app.add_handler(ChatJoinRequestHandler(handle_join_request))
    telegram_app.add_handler(CommandHandler("start", handle_start_command))
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_private_message_entrypoint))
    logger.info("Telegram application initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Telegram application: {e}")
    raise

# === –ó–ê–©–ò–¢–ê WEBHOOK –ü–û –°–ï–ö–†–ï–¢–£ ===
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET")
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}" if WEBHOOK_SECRET else "/"

if __name__ == "__main__":
    webhook_url = f"{Config.WEBHOOK_URL}/webhook/{WEBHOOK_SECRET}" if WEBHOOK_SECRET else f"{Config.WEBHOOK_URL}/"
    logger.info(f"Webhook set to {webhook_url}")
    telegram_app.run_webhook(
        listen="0.0.0.0",
        port=Config.PORT,
        webhook_url=webhook_url
    )
